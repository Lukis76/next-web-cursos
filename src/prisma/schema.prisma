// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String
    emailVerified DateTime?
    image         String?
    role          RoleType  @default(USER)
    accounts      Account[]
    sessions      Session[]
    comments      Comment[]
    posts         Post[]
    cretedAt      DateTime?
    updatedAt     DateTime?
}

enum RoleType {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id            String    @id @default(cuid())
    name          String
    body          String
    autorId       String?
    autor         User?     @relation(fields: [autorId], references: [id], onDelete: Cascade)
    postId        String?
    post          Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
    commentRoot   Comment?  @relation("Replica", fields: [commentRootId], references: [id])
    commentRootId String?
    respuestas    Comment[] @relation("Replica")
    cretedAt      DateTime?
    updatedAt     DateTime?
}

model Post {
    id        String    @id @default(cuid())
    title     String
    body      String
    autorId   String?
    autor     User?     @relation(fields: [autorId], references: [id], onDelete: Cascade)
    createdAt  DateTime?
    updatedAt DateTime?
    comments  Comment[]
}
